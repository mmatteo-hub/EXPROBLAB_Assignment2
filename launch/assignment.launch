<?xml version="1.0"?>
<launch>

  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="model" default="$(find EXPROBLAB_Assignment2)/urdf/rosbot.xacro" />
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="extra_gazebo_args" default=""/>
  <arg name="gui" default="true"/>
  <arg name="recording" default="false"/>
  <arg name="world" default="assignment_world" />
  <!-- Note that 'headless' is currently non-functional.  See gazebo_ros_pkgs issue #491 (-r arg does not disable
       rendering, but instead enables recording). The arg definition has been left here to prevent breaking downstream
       launch files, but it does nothing. -->
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>
  <arg name="physics" default="ode"/>
  <arg name="verbose" default="false"/>
  <arg name="world_name" value="$(find EXPROBLAB_Assignment2)/worlds/$(arg world).world"/>
  <arg name="respawn_gazebo" default="false"/>
  <arg name="use_clock_frequency" default="false"/>
  <arg name="pub_clock_frequency" default="100"/>

  <!-- value for the robot scale -->
  <arg name="scale_rbt" value="3"/>

  <!-- We resume the logic in empty_world.launch -->
   <!--<include file="$(find gazebo_ros)/launch/empty_world.launch"> 
    <arg name="paused" value="false"/>
  </include>-->

  <!-- set command arguments -->
  <arg unless="$(arg paused)" name="command_arg1" value=""/>
  <arg     if="$(arg paused)" name="command_arg1" value="-u"/>
  <arg unless="$(arg recording)" name="command_arg2" value=""/>
  <arg     if="$(arg recording)" name="command_arg2" value="-r"/>
  <arg unless="$(arg verbose)" name="command_arg3" value=""/>
  <arg     if="$(arg verbose)" name="command_arg3" value="--verbose"/>
  <arg unless="$(arg debug)" name="script_type" value="gzserver"/>
  <arg     if="$(arg debug)" name="script_type" value="debug"/>

  <!-- start gazebo server-->
  <group if="$(arg use_clock_frequency)">
    <param name="gazebo/pub_clock_frequency" value="$(arg pub_clock_frequency)" />
  </group>
  <node name="gazebo" pkg="gazebo_ros" type="$(arg script_type)" respawn="$(arg respawn_gazebo)" output="screen"
    args="$(arg command_arg1) $(arg command_arg2) $(arg command_arg3) -e $(arg physics) $(arg extra_gazebo_args) $(arg world_name)" />

  <!-- Load the URDF into the ROS Parameter Server -->
  <param name="robot_description" command="$(find xacro)/xacro --inorder $(arg model)"/>

  <!-- Coordinates to spawn model -->
  <arg name="x" default="-6.0"/>
  <arg name="y" default="11.0"/>
  <!--<arg name="z" default="$(eval 0.14* arg('scale_rbt'))"/>-->
  <arg name="z" default="0.2"/>
  <arg name="roll" default="0.0"/>
  <arg name="pitch" default="0.0"/>
  <arg name="yaw" default="0.0"/>
  <arg name="output" default="log"/>
	
  <!-- Start Rviz --> 
  <node name="rviz" pkg="rviz" type="rviz" required="true" args="-d $(find EXPROBLAB_Assignment2)/config/rviz/rviz_config.rviz"/>
  <!--<node name="joint_state_publisher_gui" pkg="joint_state_publisher_gui" type="joint_state_publisher_gui" ></node>-->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" ></node>
  <!--<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />-->

  <!-- start gazebo client -->
  <group if="$(arg gui)">
    <node name="gazebo_gui" pkg="gazebo_ros" type="gzclient" respawn="false" output="screen"/>
  </group>

  <node name="marker_server" pkg="EXPROBLAB_Assignment2" type="marker_server" output="screen" launch-prefix="xterm -e"/>

  <node name="detect_marker" pkg="EXPROBLAB_Assignment2" type="detect_marker" output="screen" launch-prefix="xterm -e"/>

  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <node name="model_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="$(arg output)"
    args="-urdf -model rosbot -param robot_description -x $(arg x) -y $(arg y) -z $(arg z) -R $(arg roll) -P $(arg pitch) -Y $(arg yaw)"/>

  <rosparam file="$(find EXPROBLAB_Assignment2)/config/motors_config.yaml" command="load" ns="/arm"/>

  <node name="controller_spawner" pkg="controller_manager" type="spawner" output="screen" args="--namespace=/arm
    joint_state_controller
    yb_arm_joint_1_position_controller
    yb_arm_joint_2_position_controller
    yb_arm_joint_3_position_controller
    yb_arm_joint_4_position_controller
    yb_arm_joint_5_position_controller
    --shutdown-timeout 3">
  </node>

  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher">
    <remap from="joint_states" to="arm/joint_states"/>
  </node>

  <!-- Nodes -->
  <!-- Node for the aRMOR server -->
  <node pkg="armor" type="execute" name="armor_service" args="it.emarolab.armor.ARMORMainService" launch-prefix="xterm -e"/>
  
  <!-- Node for the planner server -->
  <node pkg="EXPROBLAB_Assignment2" type="planner.py" name="planner" output="screen" launch-prefix="xterm -e"/>
  
  <!-- Node for the controller server -->
  <node pkg="EXPROBLAB_Assignment2" type="controller.py" name="controller" output="screen" launch-prefix="xterm -e"/>
  
  <!-- Node for the FSM node -->
  <node pkg="EXPROBLAB_Assignment2" type="fsm.py" name="fsm" output="screen" launch-prefix="xterm -e"/>

</launch>