<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classreasoner_1_1_reasoner" kind="class" language="Python" prot="public">
    <compoundname>reasoner::Reasoner</compoundname>
    <basecompoundref prot="public" virt="non-virtual">State</basecompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classreasoner_1_1_reasoner_1a43359502b0ba0232419f75ac14640399" prot="private" static="no" mutable="no">
        <type></type>
        <definition>reasoner.Reasoner::_helper</definition>
        <argsstring></argsstring>
        <name>_helper</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/ros_ws/src/EXPROBLAB_Assignment2/scripts/reasoner.py" line="51" column="1" bodyfile="/root/ros_ws/src/EXPROBLAB_Assignment2/scripts/reasoner.py" bodystart="51" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classreasoner_1_1_reasoner_1a70fcfcb2a5313bda1c44978a4d4864d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def reasoner.Reasoner.__init__</definition>
        <argsstring>(self, helper)</argsstring>
        <name>__init__</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>helper</type>
          <defname>helper</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>This function is used to initialize the Reasoner state for the finite state machine.
It is used also the helper object imported from the Helper class to use the shared variables and the mutex.

Args:
    helper(Helper): object that helps the sharing of information relating the shared variables and the use of mutex among the states of the machine

Returns:
    none
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/ros_ws/src/EXPROBLAB_Assignment2/scripts/reasoner.py" line="40" column="1" bodyfile="/root/ros_ws/src/EXPROBLAB_Assignment2/scripts/reasoner.py" bodystart="40" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classreasoner_1_1_reasoner_1a641884b8101d29b8f96d9b4243677215" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def reasoner.Reasoner.execute</definition>
        <argsstring>(self, userdata)</argsstring>
        <name>execute</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>userdata</type>
          <defname>userdata</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Function that is executed every time the machine enters the state.
It is responsible of returning a state transitioning to change the state.
It uses the mutex instantiated in the helper to manage the variable access.

Args:
    userdata: pointer to pass the data among the states of a State Machine
    
Returns:
    transition(String): string containing the label of the action performed and used to change state in the machine.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/ros_ws/src/EXPROBLAB_Assignment2/scripts/reasoner.py" line="59" column="1" bodyfile="/root/ros_ws/src/EXPROBLAB_Assignment2/scripts/reasoner.py" bodystart="59" bodyend="92"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classreasoner_1_1_reasoner_1a1d536c67f9c851c82c5e3fcb2163ebc1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def reasoner.Reasoner._check_accessible_location</definition>
        <argsstring>(self)</argsstring>
        <name>_check_accessible_location</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Private function that checks for the reachable locations of the robot when it is in a certain location.
Its main functionality is to return the list of reachable location that are needed: in particular it has to follow the hierarchy of the program:

* urgent location (if any);
* corridors (if there are not any urgent and if there are any corridors reachable);
* general location (if none of the previous returned something)

The choice is computed randomly among the list that are found and returned.

Args:
    none

Returns:
    location(List): a list of string representing the amount of reachable location that can visit accordin to the hierarchy.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/ros_ws/src/EXPROBLAB_Assignment2/scripts/reasoner.py" line="93" column="1" bodyfile="/root/ros_ws/src/EXPROBLAB_Assignment2/scripts/reasoner.py" bodystart="93" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classreasoner_1_1_reasoner_1a4042916c1eb0ea5d5e50a76b869683b7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def reasoner.Reasoner._check_recharge_location_available</definition>
        <argsstring>(self)</argsstring>
        <name>_check_recharge_location_available</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Private funtion to check if the recharging room is available from the actual robot position.
This is a function used when the battery is low to see if the robot can directly move to the recharging room or has to move to another location before reaching it.
If it can reach then it is returned the name of the location otherwise an empty list.

Args:
    none
    
Returns:
    name(String): name of the recharging room
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/ros_ws/src/EXPROBLAB_Assignment2/scripts/reasoner.py" line="129" column="1" bodyfile="/root/ros_ws/src/EXPROBLAB_Assignment2/scripts/reasoner.py" bodystart="129" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="classreasoner_1_1_reasoner_1a7edf9848a12b7bc3dbf478b99c054620" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def reasoner.Reasoner._check_for_corridors</definition>
        <argsstring>(self, _reachable_locations)</argsstring>
        <name>_check_for_corridors</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>_reachable_locations</type>
          <defname>_reachable_locations</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Private function to check if there are any corridors that can be reached by the robot from the actual position.
The group of all the corridors is taken by a query to the aRMOR server by the client.
However this list includes all the corridors in the ontology so they have to be sorted according to the locations reachable by the robot, which is the parameter passed to the function.

Args:
    _reachable_locations(List): list of all the reachable locations by the robot from its actual position
    
Returns:
    _reachable_corridors(List): list of all the reachable corridors by the robot from its actual position
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/ros_ws/src/EXPROBLAB_Assignment2/scripts/reasoner.py" line="146" column="1" bodyfile="/root/ros_ws/src/EXPROBLAB_Assignment2/scripts/reasoner.py" bodystart="146" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="classreasoner_1_1_reasoner_1a1ef8a7c390e881590ae34b4938c7d5d6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def reasoner.Reasoner._check_for_urgent_locations</definition>
        <argsstring>(self, _reachable_locations)</argsstring>
        <name>_check_for_urgent_locations</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>_reachable_locations</type>
          <defname>_reachable_locations</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Private function to check if there are any urgent locations that can be reached by the robot from the actual position.
The group of all the urgent locations is taken by a query to the aRMOR server by the client.
However this list includes all the locations that are currently urgent in the ontology so they have to be sorted according to the locations reachable by the robot, which is the parameter passed to the function.

Args:
    _reachable_locations(List): list of all the reachable locations by the robot from its actual position
    
Returns:
    _reachable_urgent(List): list of all the urgent locations reachable by the robot from its actual position
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/ros_ws/src/EXPROBLAB_Assignment2/scripts/reasoner.py" line="166" column="1" bodyfile="/root/ros_ws/src/EXPROBLAB_Assignment2/scripts/reasoner.py" bodystart="166" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="classreasoner_1_1_reasoner_1a705b0f21f37a0e9d5c5b08e6231fc225" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def reasoner.Reasoner._check_for_recharging_room</definition>
        <argsstring>(self, _reachable_locations)</argsstring>
        <name>_check_for_recharging_room</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>_reachable_locations</type>
          <defname>_reachable_locations</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Private function to check the rechability of the recharging room from the actual position of the robot.
The list of all the reachable locations is passed as parameter and the function checks if the recharging room is present or not in the list.
If yes it returns the name of this location.

Args:
    _reachable_locations(List): list of all the reachable locations by the robot from its actual position
    
Returns:
    recharging_room(String): name of the recharging room
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/ros_ws/src/EXPROBLAB_Assignment2/scripts/reasoner.py" line="186" column="1" bodyfile="/root/ros_ws/src/EXPROBLAB_Assignment2/scripts/reasoner.py" bodystart="186" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="classreasoner_1_1_reasoner_1af9ddda066fa674c8cd36c0151c93c8aa" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def reasoner.Reasoner._choose_destination</definition>
        <argsstring>(self, _locations)</argsstring>
        <name>_choose_destination</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>_locations</type>
          <defname>_locations</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Private function to choose the actual location the robot has to reach.
The location is chosen randomly from a list of rechable locations passed to the function.

Args:
    _locations(List): list of all the reachable locations by the robot from its actual position
    
Returns:
    _choice(String): name of the location the robot has to reach
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/ros_ws/src/EXPROBLAB_Assignment2/scripts/reasoner.py" line="202" column="1" bodyfile="/root/ros_ws/src/EXPROBLAB_Assignment2/scripts/reasoner.py" bodystart="202" bodyend="214"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>State</label>
      </node>
      <node id="1">
        <label>reasoner.Reasoner</label>
        <link refid="classreasoner_1_1_reasoner"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>State</label>
      </node>
      <node id="1">
        <label>reasoner.Reasoner</label>
        <link refid="classreasoner_1_1_reasoner"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/root/ros_ws/src/EXPROBLAB_Assignment2/scripts/reasoner.py" line="39" column="1" bodyfile="/root/ros_ws/src/EXPROBLAB_Assignment2/scripts/reasoner.py" bodystart="39" bodyend="214"/>
    <listofallmembers>
      <member refid="classreasoner_1_1_reasoner_1a70fcfcb2a5313bda1c44978a4d4864d0" prot="public" virt="non-virtual"><scope>reasoner::Reasoner</scope><name>__init__</name></member>
      <member refid="classreasoner_1_1_reasoner_1a1d536c67f9c851c82c5e3fcb2163ebc1" prot="private" virt="non-virtual"><scope>reasoner::Reasoner</scope><name>_check_accessible_location</name></member>
      <member refid="classreasoner_1_1_reasoner_1a7edf9848a12b7bc3dbf478b99c054620" prot="private" virt="non-virtual"><scope>reasoner::Reasoner</scope><name>_check_for_corridors</name></member>
      <member refid="classreasoner_1_1_reasoner_1a705b0f21f37a0e9d5c5b08e6231fc225" prot="private" virt="non-virtual"><scope>reasoner::Reasoner</scope><name>_check_for_recharging_room</name></member>
      <member refid="classreasoner_1_1_reasoner_1a1ef8a7c390e881590ae34b4938c7d5d6" prot="private" virt="non-virtual"><scope>reasoner::Reasoner</scope><name>_check_for_urgent_locations</name></member>
      <member refid="classreasoner_1_1_reasoner_1a4042916c1eb0ea5d5e50a76b869683b7" prot="private" virt="non-virtual"><scope>reasoner::Reasoner</scope><name>_check_recharge_location_available</name></member>
      <member refid="classreasoner_1_1_reasoner_1af9ddda066fa674c8cd36c0151c93c8aa" prot="private" virt="non-virtual"><scope>reasoner::Reasoner</scope><name>_choose_destination</name></member>
      <member refid="classreasoner_1_1_reasoner_1a43359502b0ba0232419f75ac14640399" prot="private" virt="non-virtual"><scope>reasoner::Reasoner</scope><name>_helper</name></member>
      <member refid="classreasoner_1_1_reasoner_1a641884b8101d29b8f96d9b4243677215" prot="public" virt="non-virtual"><scope>reasoner::Reasoner</scope><name>execute</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
